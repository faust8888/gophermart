// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/faust8888/gophermart/internal/gophermart/service (interfaces: OrderRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	model "github.com/faust8888/gophermart/internal/gophermart/model"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockOrderRepository) BeginTransaction() (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockOrderRepositoryMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockOrderRepository)(nil).BeginTransaction))
}

// CommitTransaction mocks base method.
func (m *MockOrderRepository) CommitTransaction(arg0 *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockOrderRepositoryMockRecorder) CommitTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockOrderRepository)(nil).CommitTransaction), arg0)
}

// CreateOrder mocks base method.
func (m *MockOrderRepository) CreateOrder(arg0 string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepositoryMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrder), arg0, arg1)
}

// FindAllOrders mocks base method.
func (m *MockOrderRepository) FindAllOrders(arg0 string) ([]model.OrderEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllOrders", arg0)
	ret0, _ := ret[0].([]model.OrderEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllOrders indicates an expected call of FindAllOrders.
func (mr *MockOrderRepositoryMockRecorder) FindAllOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllOrders", reflect.TypeOf((*MockOrderRepository)(nil).FindAllOrders), arg0)
}

// FindAllOrdersForAccrualProcessing mocks base method.
func (m *MockOrderRepository) FindAllOrdersForAccrualProcessing(arg0 int) ([]model.OrderEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllOrdersForAccrualProcessing", arg0)
	ret0, _ := ret[0].([]model.OrderEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllOrdersForAccrualProcessing indicates an expected call of FindAllOrdersForAccrualProcessing.
func (mr *MockOrderRepositoryMockRecorder) FindAllOrdersForAccrualProcessing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllOrdersForAccrualProcessing", reflect.TypeOf((*MockOrderRepository)(nil).FindAllOrdersForAccrualProcessing), arg0)
}

// FindLoginByOrderNumber mocks base method.
func (m *MockOrderRepository) FindLoginByOrderNumber(arg0 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLoginByOrderNumber", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLoginByOrderNumber indicates an expected call of FindLoginByOrderNumber.
func (mr *MockOrderRepositoryMockRecorder) FindLoginByOrderNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLoginByOrderNumber", reflect.TypeOf((*MockOrderRepository)(nil).FindLoginByOrderNumber), arg0)
}

// RollbackTransaction mocks base method.
func (m *MockOrderRepository) RollbackTransaction(arg0 *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockOrderRepositoryMockRecorder) RollbackTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockOrderRepository)(nil).RollbackTransaction), arg0)
}

// UpdateStatusAndAccrual mocks base method.
func (m *MockOrderRepository) UpdateStatusAndAccrual(arg0 model.OrderEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusAndAccrual", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusAndAccrual indicates an expected call of UpdateStatusAndAccrual.
func (mr *MockOrderRepositoryMockRecorder) UpdateStatusAndAccrual(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusAndAccrual", reflect.TypeOf((*MockOrderRepository)(nil).UpdateStatusAndAccrual), arg0)
}
